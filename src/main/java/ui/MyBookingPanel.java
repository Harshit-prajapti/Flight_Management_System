/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import db.DatabaseConnection;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.Session;
import model.QRGenerator;
import model.User;

/**
 *
 * @author Dell
 */
public class MyBookingPanel extends javax.swing.JPanel {

    /**
     * Creates new form MyBookingPanel
     */

    public MyBookingPanel() {
        initComponents();
//        loadBookings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        bookingsContainer = new javax.swing.JPanel();
        bookingsPanel = new javax.swing.JScrollPane();

        setBackground(new java.awt.Color(242, 244, 246));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 112));
        jLabel1.setText("YOUR FLIGHTS");

        bookingsPanel.setAlignmentX(10.0F);
        bookingsPanel.setAlignmentY(10.0F);
        bookingsPanel.setMinimumSize(new java.awt.Dimension(500, 500));
        bookingsPanel.setPreferredSize(new java.awt.Dimension(1000, 500));
        bookingsContainer.add(bookingsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bookingsContainer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1290, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(573, 573, 573)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(bookingsContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
public void loadBookings() {
    System.out.println("I am called");
    User user = Session.getCurrentUser();
    if (user == null) {
        JOptionPane.showMessageDialog(this, "Please Login First!");
        return;
    }
    int userId = user.getUserId();
    String sql = "SELECT * FROM booking WHERE user_id = ? ORDER BY booking_date DESC";

    try (Connection con = DatabaseConnection.getConnection();
         PreparedStatement pst = con.prepareStatement(sql)) {
        pst.setInt(1, userId);
        ResultSet rs = pst.executeQuery();

        bookingsContainer.removeAll();
        bookingsContainer.setLayout(new BoxLayout(bookingsContainer, BoxLayout.Y_AXIS));
        bookingsContainer.setBackground(new Color(245, 248, 250));

        while (rs.next()) {
            int bookingId = rs.getInt("booking_id");
            String seatClass = rs.getString("seat_class");
            int seats = rs.getInt("number_of_seats");
            double price = rs.getDouble("total_price");
            String status = rs.getString("payment_status");
            int scheduleId = rs.getInt("schedule_id");
            JPanel card = createBookingCard(bookingId, seatClass, seats, price, status, scheduleId);
            bookingsContainer.add(card);
            bookingsContainer.add(Box.createVerticalStrut(10)); // spacing between cards
        }

        bookingsContainer.revalidate();
        bookingsContainer.repaint();

    } catch (Exception e) {
        e.printStackTrace();
    }
}
     
private JPanel createBookingCard(int bookingId, String seatClass, int seats, double price, String status, int scheduleId) {
    JPanel card = new JPanel();
    card.setLayout(new BorderLayout(10, 10));
    card.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(200, 200, 200), 1, true),
            BorderFactory.createEmptyBorder(10, 15, 10, 15)
    ));
    card.setBackground(Color.WHITE);

    // --- Left side details ---
    String details = "<html><b>Booking ID:</b> " + bookingId +
                     "<br><b>Class:</b> " + seatClass +
                     "<br><b>Seats:</b> " + seats +
                     "<br><b>Total Price:</b> â‚¹" + price +
                     "<br><b>Status:</b> " + status.toUpperCase() + "</html>";
    JLabel label = new JLabel(details);
    label.setFont(new java.awt.Font("Segoe UI", 0, 14));

    // --- Right side buttons ---
    JPanel buttonPanel = new JPanel(new GridLayout(2, 1, 5, 5));
    buttonPanel.setOpaque(false);

    JButton payButton = new JButton("Pay Now");
    payButton.setBackground(status.equals("pending") ? new Color(0, 123, 255) : new Color(180, 180, 180));
    payButton.setForeground(Color.WHITE);
    payButton.setEnabled(status.equals("pending"));
    payButton.setFocusPainted(false);
    payButton.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
    payButton.addActionListener(e -> handlePayment(bookingId, price, seatClass,seats,scheduleId));

    JButton viewButton = new JButton();
    viewButton.setText(status.equals("pending") ? "Pending" : "Confirmed");
    viewButton.setBackground(new Color(34, 180, 90));
    viewButton.setForeground(Color.WHITE);
    viewButton.setFocusPainted(false);
    viewButton.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
    viewButton.addActionListener(e -> openTicketPanel(bookingId));

    buttonPanel.add(payButton);
    buttonPanel.add(viewButton);

    // --- Bottom passenger list ---
    JPanel passengersPanel = loadPassengers(bookingId);
    passengersPanel.setBorder(BorderFactory.createEmptyBorder(5, 20, 5, 0));

    // --- Add all to card ---
    card.add(label, BorderLayout.WEST);
    card.add(buttonPanel, BorderLayout.EAST);
    card.add(passengersPanel, BorderLayout.SOUTH);

    return card;
}

    private void openTicketPanel(int bookingId) {
    // You can open another panel or JDialog that shows all ticket info
//    TicketPanel ticketPanel = new TicketPanel(bookingId); 
//    javax.swing.SwingUtilities.getWindowAncestor(this).dispose(); 
//    new MainFrame(ticketPanel).setVisible(true);
    System.out.println(bookingId);
}

     private JPanel loadPassengers(int bookingId) {
         System.out.println("I am called");
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(0, 1));
        String sql = "SELECT * FROM passenger WHERE booking_id = ?";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement pst = con.prepareStatement(sql)) {
            pst.setInt(1, bookingId);
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                JLabel lbl = new JLabel("ðŸ‘¤ " + rs.getString("full_name") + 
                                        " | Seat: " + rs.getString("seat_number") + 
                                        " | Passport: " + rs.getString("passport_number"));
                panel.add(lbl);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return panel;
    }
      private void handlePayment(int bookingId, double price, String seatClass, int seats, int scheduleId) {
        int code = 100000 + new Random().nextInt(900000);
        // Generate QR image for the code
        QRGenerator.showQRDialog(code);

        String entered = JOptionPane.showInputDialog("Enter the code from QR to confirm payment:");
        if (entered != null && entered.equals(String.valueOf(code))) {
            confirmPayment(bookingId, price, seatClass, seats, scheduleId);
            JOptionPane.showMessageDialog(this, "Payment Successful!");
            loadBookings();
        } else {
            JOptionPane.showMessageDialog(this, "Incorrect code! Try again.");
        }
    }
      private void confirmPayment(int bookingId, double amount, String seatClass, int seats, int scheduleId) {
        try (Connection con = DatabaseConnection.getConnection()) {
            con.setAutoCommit(false);

            // 1. Update booking status
            try (PreparedStatement pst = con.prepareStatement("UPDATE booking SET payment_status='paid' WHERE booking_id=?")) {
                pst.setInt(1, bookingId);
                pst.executeUpdate();
            }

            // 2. Update revenue table
            updateRevenue(con, scheduleId, amount);

            con.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
        String query = null;
        if(seatClass.equals("business")){
            query = "UPDATE flightschedule SET available_seats_business = available_seats_business - ? WHERE schedule_id = ?";
        }else if(seatClass.equals("first_class")){
            query = "UPDATE flightschedule SET available_seats_first_class = available_seats_first_class - ? WHERE schedule_id = ?";
        }else {
            query = "UPDATE flightschedule SET available_seats_economy = available_seats_economy - ? WHERE schedule_id = ?";
        }
        try(Connection con = DatabaseConnection.getConnection();
             PreparedStatement pst = con.prepareStatement(query);){
            pst.setInt(1,seats);
            pst.setInt(2,scheduleId);
            int res = pst.executeUpdate();
            System.out.println(res);
        }catch(Exception e){
            e.printStackTrace();
        }
    }
       private int getScheduleId(int bookingId, Connection con) throws SQLException {
        try (PreparedStatement pst = con.prepareStatement("SELECT schedule_id FROM booking WHERE booking_id=?")) {
            pst.setInt(1, bookingId);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) return rs.getInt("schedule_id");
        }
        return -1;
    }
        private void updateRevenue(Connection con, int scheduleId, double amount) throws SQLException {
        String checkSQL = "SELECT total_revenue FROM revenue WHERE schedule_id = ?";
        try (PreparedStatement check = con.prepareStatement(checkSQL)) {
            check.setInt(1, scheduleId);
            ResultSet rs = check.executeQuery();
            if (rs.next()) {
                String update = "UPDATE revenue SET total_revenue = total_revenue + ? WHERE schedule_id = ?";
                try (PreparedStatement pst = con.prepareStatement(update)) {
                    pst.setDouble(1, amount);
                    pst.setInt(2, scheduleId);
                    pst.executeUpdate();
                }
            } else {
                String insert = "INSERT INTO revenue (schedule_id, total_revenue) VALUES (?, ?)";
                try (PreparedStatement pst = con.prepareStatement(insert)) {
                    pst.setInt(1, scheduleId);
                    pst.setDouble(2, amount);
                    pst.executeUpdate();
                }
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bookingsContainer;
    private javax.swing.JScrollPane bookingsPanel;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
